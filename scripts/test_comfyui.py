#!/usr/bin/env python3
"""
Script ƒë·ªÉ test k·∫øt n·ªëi ComfyUI
"""

import requests
import json
import sys
import os

# Add parent directory to path ƒë·ªÉ import modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import config

def test_comfyui_connection():
    """Test k·∫øt n·ªëi ComfyUI"""
    print("üîå Test k·∫øt n·ªëi ComfyUI")
    print("=" * 50)
    
    # Test system stats
    try:
        response = requests.get(f"{config.COMFYUI_SERVER_URL}/system_stats", timeout=10)
        if response.status_code == 200:
            stats = response.json()
            print("‚úÖ ComfyUI ƒëang ch·∫°y!")
            print(f"   - CPU: {stats.get('system', {}).get('cpu_percent', 'N/A')}%")
            print(f"   - RAM: {stats.get('system', {}).get('memory_percent', 'N/A')}%")
            print(f"   - GPU: {stats.get('system', {}).get('gpu_percent', 'N/A')}%")
        else:
            print(f"‚ùå ComfyUI tr·∫£ v·ªÅ status code: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ComfyUI")
        print("üí° ƒê·∫£m b·∫£o ComfyUI ƒëang ch·∫°y:")
        print("   cd /path/to/ComfyUI")
        print("   python main.py")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå Timeout khi k·∫øt n·ªëi ComfyUI")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return False
    
    # Test history
    try:
        response = requests.get(f"{config.COMFYUI_SERVER_URL}/history", timeout=10)
        if response.status_code == 200:
            history = response.json()
            print("‚úÖ C√≥ th·ªÉ truy c·∫≠p history")
            print(f"   - S·ªë job ƒë√£ ch·∫°y: {len(history)}")
        else:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ truy c·∫≠p history: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi truy c·∫≠p history: {e}")
    
    # Test queue info
    try:
        response = requests.get(f"{config.COMFYUI_SERVER_URL}/queue", timeout=10)
        if response.status_code == 200:
            queue = response.json()
            print("‚úÖ C√≥ th·ªÉ truy c·∫≠p queue")
            print(f"   - Job ƒëang ch·ªù: {len(queue.get('queue_pending', []))}")
            print(f"   - Job ƒëang ch·∫°y: {len(queue.get('queue_running', []))}")
        else:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ truy c·∫≠p queue: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi truy c·∫≠p queue: {e}")
    
    return True

def test_workflow_file():
    """Test workflow file"""
    print("\nüìã Test workflow file")
    print("=" * 50)
    
    workflow_file = "workflows/image_recovery_workflow.json"
    
    if not os.path.exists(workflow_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y workflow file: {workflow_file}")
        print("üí° Ch·∫°y script setup workflow:")
        print("   python scripts/setup_workflow.py")
        return False
    
    try:
        with open(workflow_file, 'r') as f:
            workflow = json.load(f)
        
        print(f"‚úÖ Workflow file h·ª£p l·ªá: {workflow_file}")
        print(f"   - S·ªë nodes: {len(workflow)}")
        
        # Ki·ªÉm tra c√°c node quan tr·ªçng
        node_types = {}
        for node_id, node_data in workflow.items():
            class_type = node_data.get("class_type", "Unknown")
            node_types[class_type] = node_types.get(class_type, 0) + 1
        
        print("   - C√°c node types:")
        for class_type, count in node_types.items():
            print(f"     * {class_type}: {count}")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå Workflow file kh√¥ng h·ª£p l·ªá JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc workflow file: {e}")
        return False

def main():
    """Main function"""
    print("üß™ Test ComfyUI Setup")
    print("=" * 50)
    
    # Test connection
    connection_ok = test_comfyui_connection()
    
    # Test workflow file
    workflow_ok = test_workflow_file()
    
    print("\nüìä K·∫øt qu·∫£ test:")
    print("=" * 50)
    print(f"ComfyUI Connection: {'‚úÖ OK' if connection_ok else '‚ùå FAIL'}")
    print(f"Workflow File: {'‚úÖ OK' if workflow_ok else '‚ùå FAIL'}")
    
    if connection_ok and workflow_ok:
        print("\nüéâ T·∫•t c·∫£ ƒë·ªÅu OK! B·∫°n c√≥ th·ªÉ ch·∫°y API.")
        print("\nüöÄ Ch·∫°y API:")
        print("   python main.py")
        print("\nü§ñ Ch·∫°y Telegram Bot:")
        print("   python run_bot.py")
        print("\nüîÑ Ch·∫°y c·∫£ hai:")
        print("   python run_all.py")
    else:
        print("\n‚ö†Ô∏è C·∫ßn s·ª≠a l·ªói tr∆∞·ªõc khi ch·∫°y API.")
        
        if not connection_ok:
            print("\nüîß S·ª≠a l·ªói ComfyUI:")
            print("1. ƒê·∫£m b·∫£o ComfyUI ƒëang ch·∫°y")
            print("2. Ki·ªÉm tra port 8188")
            print("3. Ki·ªÉm tra firewall")
        
        if not workflow_ok:
            print("\nüîß S·ª≠a l·ªói Workflow:")
            print("1. Ch·∫°y: python scripts/setup_workflow.py")
            print("2. T·∫°o workflow trong ComfyUI")
            print("3. Export v√† l∆∞u JSON")

if __name__ == "__main__":
    main()
