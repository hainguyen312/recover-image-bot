import os
import logging
import asyncio
import tempfile
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode
import httpx
import json
from io import BytesIO
from PIL import Image

from config import config
from storage_service import get_storage_service
from comfyui_client import ComfyUIClient

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, token: str, api_base_url: str = "http://localhost:8000"):
        self.token = token
        self.api_base_url = api_base_url
        self.application = None
        self.user_sessions = {}  # L∆∞u tr·ªØ session c·ªßa ng∆∞·ªùi d√πng
        # Kh·ªüi t·∫°o storage service (Firebase n·∫øu c√≥, fallback Local)
        self.storage = get_storage_service()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /start"""
        user = update.effective_user
        welcome_text = f"""
ü§ñ **Ch√†o m·ª´ng ƒë·∫øn v·ªõi Image Recovery Bot!**

Xin ch√†o {user.first_name}! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph·ª•c h·ªìi v√† c·∫£i thi·ªán ·∫£nh b·∫±ng AI.

**C√°ch s·ª≠ d·ª•ng:**
1. üì∏ G·ª≠i ·∫£nh c·∫ßn ph·ª•c h·ªìi
2. ‚úçÔ∏è Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ vi·ªác ph·ª•c h·ªìi
3. ‚öôÔ∏è Ch·ªçn c√°c tham s·ªë (t√πy ch·ªçn)
4. üéØ Ch·ªù k·∫øt qu·∫£!

**L·ªánh c√≥ s·∫µn:**
/start - Hi·ªÉn th·ªã menu ch√≠nh
/help - H∆∞·ªõng d·∫´n chi ti·∫øt
/settings - C√†i ƒë·∫∑t tham s·ªë m·∫∑c ƒë·ªãnh
/status - Ki·ªÉm tra tr·∫°ng th√°i API

H√£y g·ª≠i ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu! üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("üìñ H∆∞·ªõng d·∫´n", callback_data="help")],
            [InlineKeyboardButton("‚öôÔ∏è C√†i ƒë·∫∑t", callback_data="settings")],
            [InlineKeyboardButton("üìä Tr·∫°ng th√°i", callback_data="status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /help"""
        help_text = """
üìñ **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Image Recovery Bot**

**B∆∞·ªõc 1: G·ª≠i ·∫£nh**
- G·ª≠i ·∫£nh c·∫ßn ph·ª•c h·ªìi (jpg, png, webp)
- K√≠ch th∆∞·ªõc t·ªëi ƒëa: 10MB

**B∆∞·ªõc 2: Nh·∫≠p prompt**
- M√¥ t·∫£ chi ti·∫øt v·ªÅ vi·ªác ph·ª•c h·ªìi
- V√≠ d·ª•: "restore this damaged photo, fix scratches, improve colors"

**V√≠ d·ª• prompt t·ªët:**
‚úÖ "restore this old photo, fix scratches and stains, enhance colors"
‚úÖ "improve image quality, remove noise, make it sharper"
‚úÖ "fix damaged areas, restore missing parts, enhance details"

**L∆∞u √Ω:**
- Qu√° tr√¨nh x·ª≠ l√Ω c√≥ th·ªÉ m·∫•t 30-60 gi√¢y
- K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c l∆∞u tr√™n cloud storage
- Bot h·ªó tr·ª£ ti·∫øng Vi·ªát v√† ti·∫øng Anh
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /settings"""
        user_id = update.effective_user.id
        
        # L·∫•y settings hi·ªán t·∫°i c·ªßa user
        current_settings = self.user_sessions.get(user_id, {}).get('settings', {
            'strength': 0.8,
            'steps': 8,
            'guidance_scale': 1.8
        })
        
        settings_text = f"""
‚öôÔ∏è **C√†i ƒë·∫∑t hi·ªán t·∫°i:**

üîß **Strength:** {current_settings['strength']}
üìä **Steps:** {current_settings['steps']}
üéØ **Guidance Scale:** {current_settings['guidance_scale']}

S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ thay ƒë·ªïi:
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üîß Strength", callback_data="set_strength"),
                InlineKeyboardButton("üìä Steps", callback_data="set_steps")
            ],
            [
                InlineKeyboardButton("üéØ Guidance", callback_data="set_guidance"),
                InlineKeyboardButton("üîÑ Reset", callback_data="reset_settings")
            ],
            [InlineKeyboardButton("‚úÖ Ho√†n th√†nh", callback_data="close_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            settings_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Ki·ªÉm tra tr·∫°ng th√°i API"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.api_base_url}/health", timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    status_text = f"""
üìä **Tr·∫°ng th√°i h·ªá th·ªëng:**

üü¢ **API:** Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
ü§ñ **ComfyUI:** {data['services']['comfyui']}
‚òÅÔ∏è **Storage:** {data['services']['storage']}

S·∫µn s√†ng x·ª≠ l√Ω ·∫£nh! üöÄ
                    """
                else:
                    status_text = "üî¥ API kh√¥ng ho·∫°t ƒë·ªông. Vui l√≤ng th·ª≠ l·∫°i sau."
                    
        except Exception as e:
            status_text = f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi API: {str(e)}"
        
        await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i ·∫£nh"""
        user_id = update.effective_user.id
        
        logger.info(f"User {user_id} sent photo")
        
        # L∆∞u th√¥ng tin ·∫£nh v√†o session
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {'waiting_for_prompt': False}
        
        # L·∫•y ·∫£nh c√≥ ƒë·ªô ph√¢n gi·∫£i cao nh·∫•t
        photo = update.message.photo[-1]
        
        # L∆∞u file_id ƒë·ªÉ s·ª≠ d·ª•ng sau
        self.user_sessions[user_id]['photo_file_id'] = photo.file_id
        self.user_sessions[user_id]['waiting_for_prompt'] = True
        
        logger.info(f"User {user_id} session updated: {self.user_sessions[user_id]}")
        
        await update.message.reply_text(
            "Anh da duoc nhan!\n\n"
            "Bay gio hay gui mo ta ve viec phuc hoi anh (prompt):\n\n"
            "Vi du: \"restore this damaged photo, fix scratches, improve colors\""
        )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        # Debug logging
        logger.info(f"User {user_id} sent text: '{text}'")
        logger.info(f"User session: {self.user_sessions.get(user_id, 'No session')}")
        
        # Ki·ªÉm tra n·∫øu user ƒëang nh·∫≠p prompt
        if user_id in self.user_sessions and self.user_sessions[user_id].get('waiting_for_prompt'):
            logger.info(f"Processing prompt for user {user_id}: '{text}'")
            await self.process_image_recovery(update, context, text)
            return
        
        # X·ª≠ l√Ω c√°c l·ªánh kh√°c
        if text.startswith('/'):
            await update.message.reply_text(
                "Lenh khong duoc nhan dien. Su dung /help de xem danh sach lenh."
            )
        else:
            logger.info(f"User {user_id} sent unrecognized text, no session or not waiting for prompt")
            await update.message.reply_text(
                "Toi khong hieu. Hay gui anh de bat dau phuc hoi hoac su dung /help de xem huong dan."
            )
    
    async def process_image_recovery(self, update: Update, context: ContextTypes.DEFAULT_TYPE, prompt: str):
        """X·ª≠ l√Ω ph·ª•c h·ªìi ·∫£nh tr·ª±c ti·∫øp v·ªõi ComfyUI b·∫±ng workflow Restore.json.
        Ch·ªâ thay ·∫£nh ƒë·∫ßu v√†o v√† text_b c·ªßa node StringFunction|pysssss."""
        user_id = update.effective_user.id
        try:
            processing_msg = await update.message.reply_text(
                "ƒêang x·ª≠ l√Ω ·∫£nh... Vui l√≤ng ch·ªù trong gi√¢y l√°t...",
                parse_mode=ParseMode.MARKDOWN
            )

            photo_file_id = self.user_sessions[user_id]['photo_file_id']
            file = await context.bot.get_file(photo_file_id)

            with tempfile.TemporaryDirectory() as tmpdir:
                local_path = os.path.join(tmpdir, "input.jpg")
                await file.download_to_drive(local_path)

                client = ComfyUIClient()
                # Ch·∫°y ƒë√∫ng workflow export g·ªëc, ch·ªâ ghi ƒë√® filename ·∫£nh v√† text_b
                result_filename = client.process_image_recovery_exact(
                    input_image_path=local_path,
                    prompt=prompt
                )

                # T·∫£i ·∫£nh k·∫øt qu·∫£ t·ª´ ComfyUI
                img_bytes = client.get_image(result_filename)

            await processing_msg.delete()

            # Upload ·∫£nh k·∫øt qu·∫£ l√™n storage ƒë·ªÉ l·∫•y URL
            try:
                public_url = await self.storage.upload_image(img_bytes, result_filename, content_type="image/png")
            except Exception:
                # N·∫øu upload l·ªói, g·ª≠i ·∫£nh tr·ª±c ti·∫øp nh∆∞ fallback
                await update.message.reply_photo(
                    photo=BytesIO(img_bytes),
                    caption=f"üé® ·∫¢nh ƒë√£ ƒë∆∞·ª£c ph·ª•c h·ªìi!\n\nPrompt: {prompt}"
                )
            else:
                # G·ª≠i ·∫£nh qua URL
                await update.message.reply_photo(
                    photo=public_url,
                    caption=f"üé® ·∫¢nh ƒë√£ ƒë∆∞·ª£c ph·ª•c h·ªìi!\n\nPrompt: {prompt}"
                )

            self.user_sessions[user_id]['waiting_for_prompt'] = False
            if 'photo_file_id' in self.user_sessions[user_id]:
                del self.user_sessions[user_id]['photo_file_id']

        except Exception as e:
            logger.error(f"Error processing image recovery: {str(e)}")
            await update.message.reply_text(
                f"‚ùå **ƒê√£ x·∫£y ra l·ªói:**\n\n{str(e)}\n\nVui l√≤ng th·ª≠ l·∫°i sau.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω callback t·ª´ inline keyboard"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == "help":
            await self.help_command(update, context)
        elif query.data == "settings":
            await self.settings_command(update, context)
        elif query.data == "status":
            await self.status_command(update, context)
        elif query.data == "close_settings":
            await query.edit_message_text("‚úÖ C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u!")
        # C√≥ th·ªÉ th√™m c√°c callback kh√°c cho settings...
    
    def setup_handlers(self):
        """Thi·∫øt l·∫≠p c√°c handler"""
        # Command handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # Message handlers
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # Callback query handler
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def run(self):
        """Ch·∫°y bot"""
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        
        logger.info("Starting Telegram bot...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("Telegram bot is running...")
        
        # Gi·ªØ bot ch·∫°y
        await asyncio.Event().wait()

async def main():
    """Main function"""
    # L·∫•y token t·ª´ environment variable
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        logger.error("TELEGRAM_BOT_TOKEN environment variable is not set!")
        return
    
    api_url = os.getenv('API_BASE_URL', 'http://localhost:8000')
    
    bot = TelegramBot(bot_token, api_url)
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
